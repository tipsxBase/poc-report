export const getClearJob = () => {
  return {
    id: "job_clear_data",
    name: "清除数据",
    numOfThread: 1,
    enable: true,
    taskletQueue: [
      {
        id: "task_clear_data",
        name: "新增类别",
        loopCount: 10,
        processors: [
          {
            klass: "PocMultiSqlExecuteProcessor",
            name: "execute",
            sqlCollection: [
              "truncate table poc_user;",
              "truncate table poc_sellers;",
              "truncate table poc_product_user_relation;",
              "truncate table poc_product;",
              "truncate table poc_order;",
              "truncate table poc_category;",
              "truncate table poc_brands;",
            ],
          },
        ],
      },
    ],
  };
};

export const getInitialConfig = (
  database_name: string,
  password: string,
  username: string,
  cn_url: string
) => {
  return {
    jobs: [],
    logPath: "/home/omm/poc/logs/data_initial",
    listeners: null,
    dataSource: {
      jdbcUrl: `jdbc:hexadb://${cn_url}/${database_name}?autoBalance=true`,
      username: username,
      password: password,
    },
    writeLogCronExpression: "0/30 * * * * ?",
    globalPreProcessors: [
      {
        klass: "PreEnumProcessor",
        id: "g_6d3a186e0.668cc",
        name: "业务类型",
        enums: ["个人业务", "企业业务"],
      },
      {
        klass: "PreEnumProcessor",
        id: "g_57b3cba8af.2bac",
        name: "状态",
        enums: ["active", "disabled"],
      },
    ],
  };
};

export const BASE_NUM_OF_THREAD = 10;
export const BASE_BATCH = 1000;

export const getCategoryJob = (
  category_number: number,
  num_of_thread = BASE_NUM_OF_THREAD,
  batch = BASE_BATCH
) => {
  const loopCount = Math.ceil(category_number / num_of_thread / batch);

  return {
    id: "job_poc_category",
    name: "插入商品类型表",
    numOfThread: BASE_NUM_OF_THREAD,
    enable: true,
    taskletQueue: [
      {
        id: "task_poc_category",
        name: "新增类别",
        loopCount: loopCount,
        mockDataLine: {
          batch: BASE_BATCH,
          dataDefineList: [
            {
              klass: "SqlDataDefine",
              key: "category_id",
              type: "number",
              mockRule: "snowflake",
              export: true,
            },
            {
              klass: "SqlDataDefine",
              key: "category_name",
              type: "string",
              mockRule: "title",
              min: 2,
              max: 12,
            },
            {
              klass: "SqlDataDefine",
              key: "category_description",
              type: "string",
              mockRule: "sentence",
              min: 10,
              max: 20,
            },
            {
              klass: "SqlDataDefine",
              key: "category_parent_id",
              type: "number",
              mockRule: "snowflake",
            },
            {
              klass: "SqlDataDefine",
              key: "category_created_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
            {
              klass: "SqlDataDefine",
              key: "category_updated_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
            {
              klass: "SqlDataDefine",
              key: "category_status",
              type: "number",
              mockRule: "integerBetween",
              min: 0,
              max: 1,
            },
            {
              klass: "SqlDataDefine",
              key: "category_image_url",
              type: "string",
              mockRule: "avatar",
            },
            {
              klass: "SqlDataDefine",
              key: "category_seo_title",
              type: "string",
              mockRule: "sentence",
              min: 10,
              max: 20,
            },
            {
              klass: "SqlDataDefine",
              key: "category_seo_description",
              type: "string",
              mockRule: "sentence",
              min: 10,
              max: 20,
            },
            {
              klass: "SqlDataDefine",
              key: "category_seo_keywords",
              type: "string",
              mockRule: "sentence",
              min: 10,
              max: 20,
            },
            {
              klass: "SqlDataDefine",
              key: "category_level",
              type: "number",
              mockRule: "integerBetween",
              min: 0,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "category_path",
              type: "string",
              mockRule: "path",
            },
            {
              klass: "SqlDataDefine",
              key: "category_sort_order",
              type: "number",
              mockRule: "integerBetween",
              min: 0,
              max: 10000,
            },
            {
              klass: "SqlDataDefine",
              key: "category_is_featured",
              type: "number",
              mockRule: "integerBetween",
              min: 0,
              max: 1,
            },
            {
              klass: "SqlDataDefine",
              key: "category_notes",
              type: "string",
              mockRule: "sentence",
              min: 10,
              max: 20,
            },
          ],
        },
        processors: [
          {
            klass: "PocCopyInsertProcessor",
            name: "execute",
            sqlCollection: [
              "INSERT into\n  poc_category (\n    category_id,\n    name,\n    description,\n    parent_id,\n    created_at,\n    updated_at,\n    status,\n    image_url,\n    seo_title,\n    seo_description,\n    seo_keywords,\n    level,\n    path,\n    sort_order,\n    is_featured,\n    notes\n  )\nVALUES\n  (\n    :category_id,\n    :category_name,\n    :category_description,\n    :category_parent_id,\n    :category_created_at,\n    :category_updated_at,\n    :category_status,\n    :category_image_url,\n    :category_seo_title,\n    :category_seo_description,\n    :category_seo_keywords,\n    :category_level,\n    :category_path,\n    :category_sort_order,\n    :category_is_featured,\n    :category_notes\n  )",
            ],
          },
        ],
      },
    ],
  };
};

export const getUserJob = (
  user_number: number,
  num_of_thread = BASE_NUM_OF_THREAD,
  batch = BASE_BATCH
) => {
  const loopCount = Math.ceil(user_number / num_of_thread / batch);
  return {
    id: "job_poc_user",
    name: "单表用户100000",
    numOfThread: BASE_NUM_OF_THREAD,
    enable: true,
    refGlobals: [],
    taskletQueue: [
      {
        id: "tasklet_poc_user",
        name: "tasklet_poc_user",
        loopCount: loopCount,
        mockDataLine: {
          batch: BASE_BATCH,
          dataDefineList: [
            {
              klass: "SqlDataDefine",
              key: "user_id",
              type: "number",
              mockRule: "snowflake",
              export: true,
            },
            {
              klass: "SqlDataDefine",
              key: "user_username",
              type: "string",
              mockRule: "title",
              min: 2,
              max: 12,
            },
            {
              klass: "SqlDataDefine",
              key: "user_password",
              type: "string",
              mockRule: "password",
            },
            {
              klass: "SqlDataDefine",
              key: "user_email",
              type: "string",
              mockRule: "email",
            },
            {
              klass: "SqlDataDefine",
              key: "user_phone_number",
              type: "string",
              mockRule: "cellPhone",
            },
            {
              klass: "SqlDataDefine",
              key: "user_created_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00",
              max: "2024-03-31T23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "user_updated_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00",
              max: "2024-03-31T23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "user_last_login",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00",
              max: "2024-03-31T23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "user_last_login_ip",
              type: "string",
              mockRule: "ipV4",
            },
            {
              klass: "SqlDataDefine",
              key: "user_profile_picture",
              type: "string",
              mockRule: "avatar",
            },
            {
              klass: "SqlDataDefine",
              key: "user_birthday",
              type: "date",
              mockRule: "birthday",
            },
            {
              klass: "SqlDataDefine",
              key: "user_gender",
              type: "number",
              mockRule: "gender",
            },
            {
              klass: "SqlDataDefine",
              key: "user_country",
              type: "string",
              mockRule: "country",
            },
            {
              klass: "SqlDataDefine",
              key: "user_state",
              type: "string",
              mockRule: "province",
            },
            {
              klass: "SqlDataDefine",
              key: "user_city",
              type: "string",
              mockRule: "city",
            },
            {
              klass: "SqlDataDefine",
              key: "user_address",
              type: "string",
              mockRule: "fullAddress",
            },
            {
              klass: "SqlDataDefine",
              key: "user_zip_code",
              type: "string",
              mockRule: "zipCode",
            },
            {
              klass: "SqlDataDefine",
              key: "user_reward_points",
              type: "number",
              mockRule: "integerBetween",
              min: 10000,
              max: 100000,
            },
            {
              klass: "SqlDataDefine",
              key: "user_account_balance",
              type: "number",
              mockRule: "decimalBetween",
              min: 1000000,
              max: 10000000,
              scale: 2,
            },
            {
              klass: "SqlDataDefine",
              key: "user_is_email_verified",
              type: "number",
              mockRule: "integerBetween",
              min: 0,
              max: 1,
            },
            {
              klass: "SqlDataDefine",
              key: "user_is_phone_verified",
              type: "number",
              mockRule: "integerBetween",
              min: 0,
              max: 1,
            },
            {
              klass: "SqlDataDefine",
              key: "user_security_question",
              type: "string",
              mockRule: "sentence",
              min: 0,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "user_security_answer",
              type: "string",
              mockRule: "sentence",
              min: 0,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "user_notes",
              type: "string",
              mockRule: "sentence",
              min: 100,
              max: 200,
            },
            {
              klass: "SqlDataDefine",
              key: "user_preferences",
              type: "string",
              mockRule: "sentence",
              min: 100,
              max: 200,
            },
            {
              klass: "SqlDataDefine",
              key: "user_login_attempts",
              type: "number",
              mockRule: "longBetween",
              min: "5",
              max: "10",
            },
            {
              klass: "SqlDataDefine",
              key: "user_lockout_time",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
          ],
        },
        processors: [
          {
            klass: "PocCopyInsertProcessor",
            name: "新增用户",
            sqlCollection: [
              "INSERT into\n  poc_user (\n    user_id,\n    username,\n    password,\n    email,\n    phone_number,\n    created_at,\n    updated_at,\n    last_login,\n    last_login_ip,\n    profile_picture,\n    birthday,\n    gender,\n    country,\n    state,\n    city,\n    address,\n    zip_code,\n    reward_points,\n    account_balance,\n    is_email_verified,\n    is_phone_verified,\n    security_question,\n    security_answer,\n    notes,\n    preferences,\n    login_attempts,\n    lockout_time\n  )\nVALUES\n  (\n    :user_id,\n    :user_username,\n    :user_password,\n    :user_email,\n    :user_phone_number,\n    :user_created_at,\n    :user_updated_at,\n    :user_last_login,\n    :user_last_login_ip,\n    :user_profile_picture,\n    :user_birthday,\n    :user_gender,\n    :user_country,\n    :user_state,\n    :user_city,\n    :user_address,\n    :user_zip_code,\n    :user_reward_points,\n    :user_account_balance,\n    :user_is_email_verified,\n    :user_is_phone_verified,\n    :user_security_question,\n    :user_security_answer,\n    :user_notes,\n    :user_preferences,\n    :user_login_attempts,\n    :user_lockout_time\n  )    ",
            ],
          },
        ],
      },
    ],
  };
};

export const getSellersJob = (
  seller_number: number,
  num_of_thread = BASE_NUM_OF_THREAD,
  batch = BASE_BATCH
) => {
  const loopCount = Math.ceil(seller_number / num_of_thread / batch);
  return {
    id: "job_poc_sellers",
    name: "插入卖家表",
    numOfThread: BASE_NUM_OF_THREAD,
    enable: true,
    taskletQueue: [
      {
        id: "task_poc_sellers",
        name: "task_poc_sellers",
        loopCount: loopCount,
        mockDataLine: {
          batch: BASE_BATCH,
          dataDefineList: [
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_seller_id",
              type: "number",
              mockRule: "snowflake",
              export: true,
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_seller_name",
              type: "string",
              mockRule: "title",
              min: 2,
              max: 12,
              export: true,
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_email",
              type: "string",
              mockRule: "email",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_phone_number",
              type: "string",
              mockRule: "cellPhone",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_password",
              type: "string",
              mockRule: "password",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_registration_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_last_login_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_address",
              type: "string",
              mockRule: "fullAddress",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_zip_code",
              type: "string",
              mockRule: "zipCode",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_country",
              type: "string",
              mockRule: "country",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_business_type",
              type: "string",
              mockRule: "enums",
              ref: "g_6d3a186e0.668cc",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_company_name",
              type: "string",
              mockRule: "title",
              min: 2,
              max: 12,
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_status",
              type: "string",
              mockRule: "enums",
              ref: "g_57b3cba8af.2bac",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_sellers_created_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
          ],
        },
        processors: [
          {
            klass: "PocCopyInsertProcessor",
            name: "插入卖家表",
            sqlCollection: [
              "INSERT INTO\n  poc_sellers (\n    seller_id,\n    seller_name,\n    email,\n    phone_number,\n    password,\n    registration_date,\n    last_login_date,\n    address,\n    zip_code,\n    country,\n    business_type,\n    company_name,\n    status,\n    created_at\n  )\nVALUES\n  (\n    :poc_sellers_seller_id,\n    :poc_sellers_seller_name,\n    :poc_sellers_email,\n    :poc_sellers_phone_number,\n    :poc_sellers_password,\n    :poc_sellers_registration_date,\n    :poc_sellers_last_login_date,\n    :poc_sellers_address,\n    :poc_sellers_zip_code,\n    :poc_sellers_country,\n    :poc_sellers_business_type,\n    :poc_sellers_company_name,\n    :poc_sellers_status,\n    :poc_sellers_created_at\n  );",
            ],
          },
        ],
      },
    ],
  };
};

export const getBrandJob = (
  brand_number: number,
  num_of_thread = BASE_NUM_OF_THREAD,
  batch = BASE_BATCH
) => {
  const loopCount = Math.ceil(brand_number / num_of_thread / batch);
  return {
    id: "job_poc_brands",
    name: "插入品牌表100000",
    numOfThread: BASE_NUM_OF_THREAD,
    enable: true,
    taskletQueue: [
      {
        id: "task_poc_brands",
        name: "task_poc_brands",
        loopCount: loopCount,
        mockDataLine: {
          batch: BASE_BATCH,
          dataDefineList: [
            {
              klass: "SqlDataDefine",
              key: "poc_brands_brand_id",
              type: "number",
              mockRule: "snowflake",
              export: true,
            },
            {
              klass: "SqlDataDefine",
              key: "poc_brands_brand_name",
              type: "string",
              mockRule: "title",
              min: 2,
              max: 12,
              export: true,
            },
            {
              klass: "SqlDataDefine",
              key: "poc_brands_description",
              type: "string",
              mockRule: "sentence",
              min: 10,
              max: 20,
            },
            {
              klass: "SqlDataDefine",
              key: "poc_brands_created_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
            {
              klass: "SqlDataDefine",
              key: "poc_brands_logo_url",
              type: "string",
              mockRule: "avatar",
            },
          ],
        },
        processors: [
          {
            klass: "PocCopyInsertProcessor",
            name: "execute",
            sqlCollection: [
              "INSERT into\n  poc_brands (\n    brand_id,\n    brand_name,\n    logo_url,\n    description,\n    created_at\n  )\nVALUES\n  (\n    :poc_brands_brand_id,\n    :poc_brands_brand_name,\n    :poc_brands_logo_url,\n    :poc_brands_description,\n    :poc_brands_created_at\n  )",
            ],
          },
        ],
      },
    ],
  };
};

export const getProductJob = (
  product_number: number,
  num_of_thread = BASE_NUM_OF_THREAD,
  batch = BASE_BATCH
) => {
  const loopCount = Math.ceil(product_number / num_of_thread / batch);
  return {
    id: "job_poc_product",
    name: "插入产品表，及产品用户关系表",
    numOfThread: BASE_NUM_OF_THREAD,
    taskletQueue: [
      {
        id: "tasklet_poc_product",
        name: "tasklet_poc_product",
        loopCount: loopCount,
        mockDataLine: {
          batch: BASE_BATCH,
          dataDefineList: [
            {
              klass: "SqlDataDefine",
              key: "product_id",
              type: "number",
              mockRule: "snowflake",
              export: true,
            },
            {
              klass: "SqlDataDefine",
              key: "category_id",
              type: "number",
              mockRule: "jobExport",
              ref: "job_poc_category_#_task_poc_category_#_category_id",
            },
            {
              klass: "SqlDataDefine",
              key: "user_id",
              type: "number",
              mockRule: "jobExport",
              ref: "job_poc_user_#_tasklet_poc_user_#_user_id",
            },
            {
              klass: "SqlDataDefine",
              key: "relation_id",
              type: "number",
              mockRule: "snowflake",
            },
            {
              klass: "SqlDataDefine",
              key: "product_name",
              type: "string",
              mockRule: "title",
              min: 2,
              max: 12,
            },
            {
              klass: "SqlDataDefine",
              key: "product_description",
              type: "string",
              mockRule: "sentence",
              min: 100,
              max: 200,
            },
            {
              klass: "SqlDataDefine",
              key: "product_price",
              type: "number",
              mockRule: "doubleBetween",
              min: 100,
              max: 2000,
            },
            {
              klass: "SqlDataDefine",
              key: "product_stock",
              type: "number",
              mockRule: "integerBetween",
              min: 30000,
              max: 50000,
            },
            {
              klass: "SqlDataDefine",
              key: "product_sold",
              type: "number",
              mockRule: "integerBetween",
              min: 20000,
              max: 30000,
            },
            {
              klass: "SqlDataDefine",
              key: "product_rating",
              type: "number",
              mockRule: "decimalBetween",
              min: 5,
              max: 9,
              scale: 2,
            },
            {
              klass: "SqlDataDefine",
              key: "product_created_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
            {
              klass: "SqlDataDefine",
              key: "product_updated_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
            {
              klass: "SqlDataDefine",
              key: "product_status",
              type: "number",
              mockRule: "integerBetween",
              min: 0,
              max: 1,
            },
            {
              klass: "SqlDataDefine",
              key: "product_image_url",
              type: "string",
              mockRule: "avatar",
            },
            {
              klass: "SqlDataDefine",
              key: "product_shipping_cost",
              type: "number",
              mockRule: "doubleBetween",
              min: 1000,
              max: 3000,
            },
            {
              klass: "SqlDataDefine",
              key: "product_origin_country",
              type: "string",
              mockRule: "country",
            },
            {
              klass: "SqlDataDefine",
              key: "product_weight",
              type: "number",
              mockRule: "doubleBetween",
              min: 1,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "product_dimensions",
              type: "string",
              mockRule: "fakerExpression",
              fakerExpression: "#{numerify '###x###x###'}",
            },
            {
              klass: "SqlDataDefine",
              key: "product_color",
              type: "string",
              mockRule: "faker",
              path: "color.hex",
            },
            {
              klass: "SqlDataDefine",
              key: "product_material",
              type: "string",
              mockRule: "faker",
              path: "commerce.material",
            },
            {
              klass: "SqlDataDefine",
              key: "product_brand",
              type: "string",
              mockRule: "jobExport",
              ref: "job_poc_brands_#_task_poc_brands_#_poc_brands_brand_name",
            },
            {
              klass: "SqlDataDefine",
              key: "product_warranty_period",
              type: "number",
              mockRule: "integerBetween",
              min: 24,
              max: 36,
            },
            {
              klass: "SqlDataDefine",
              key: "product_return_policy",
              type: "string",
              mockRule: "sentence",
              min: 0,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "product_discount",
              type: "number",
              mockRule: "doubleBetween",
              min: 70,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "product_discount_start_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "product_discount_end_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "product_seo_title",
              type: "string",
              mockRule: "sentence",
              min: 0,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "product_seo_description",
              type: "string",
              mockRule: "sentence",
              min: 0,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "product_seo_keywords",
              type: "string",
              mockRule: "sentence",
              min: 0,
              max: 100,
            },
            {
              klass: "SqlDataDefine",
              key: "product_views",
              type: "number",
              mockRule: "integerBetween",
              min: 1000,
              max: 3000,
            },
            {
              klass: "SqlDataDefine",
              key: "product_notes",
              type: "string",
              mockRule: "sentence",
              min: 100,
              max: 200,
            },
            {
              key: "brand_id",
              nullPercent: 0,
              type: "number",
              mockRule: "jobExport",
              ref: "job_poc_brands_#_task_poc_brands_#_poc_brands_brand_id",
            },
            {
              key: "seller_id",
              nullPercent: 0,
              type: "number",
              mockRule: "jobExport",
              ref: "job_poc_sellers_#_task_poc_sellers_#_poc_sellers_seller_id",
            },
            {
              klass: "SqlDataDefine",
              key: "relation_created_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
          ],
        },
        processors: [
          {
            klass: "PocCopyInsertProcessor",
            name: "execute",
            sqlCollection: [
              "INSERT into\n  poc_product (\n    product_id,\n    name,\n    description,\n    price,\n    category_id,\n    stock,\n    sold,\n    rating,\n    created_at,\n    updated_at,\n    status,\n    image_url,\n    shipping_cost,\n    origin_country,\n    weight,\n    dimensions,\n    color,\n    material,\n    brand,\n    warranty_period,\n    return_policy,\n    discount,\n    discount_start_date,\n    discount_end_date,\n    seo_title,\n    seo_description,\n    seo_keywords,\n    views,\n    notes,\n    brand_id,\n    seller_id\n  )\nVALUES\n  (\n    :product_id,\n    :product_name,\n    :product_description,\n    :product_price,\n    :category_id,\n    :product_stock,\n    :product_sold,\n    :product_rating,\n    :product_created_at,\n    :product_updated_at,\n    :product_status,\n    :product_image_url,\n    :product_shipping_cost,\n    :product_origin_country,\n    :product_weight,\n    :product_dimensions,\n    :product_color,\n    :product_material,\n    :product_brand,\n    :product_warranty_period,\n    :product_return_policy,\n    :product_discount,\n    :product_discount_start_date,\n    :product_discount_end_date,\n    :product_seo_title,\n    :product_seo_description,\n    :product_seo_keywords,\n    :product_views,\n    :product_notes,\n    :brand_id, \n    :seller_id\n  )",
              "INSERT into\n  poc_product_user_relation (relation_id, product_id, user_id, created_at)\nVALUES\n  (\n    :relation_id,\n    :product_id,\n    :user_id,\n    :relation_created_at\n  )",
            ],
          },
        ],
      },
    ],
  };
};

export const getOrderJob = (
  order_number: number,
  num_of_thread = BASE_NUM_OF_THREAD,
  batch = BASE_BATCH
) => {
  const loopCount = Math.ceil(order_number / num_of_thread / batch);
  return {
    id: "job_poc_order",
    name: "插入订单表",
    numOfThread: BASE_NUM_OF_THREAD,
    taskletQueue: [
      {
        id: "tasklet_poc_order",
        name: "tasklet_poc_order",
        loopCount: loopCount,
        mockDataLine: {
          batch: BASE_BATCH,
          dataDefineList: [
            {
              klass: "SqlDataDefine",
              key: "order_id",
              type: "number",
              mockRule: "snowflake",
            },
            {
              klass: "SqlDataDefine",
              key: "product_id",
              type: "number",
              mockRule: "jobExport",
              ref: "job_poc_product_#_tasklet_poc_product_#_product_id",
            },
            {
              klass: "SqlDataDefine",
              key: "user_id",
              type: "number",
              mockRule: "jobExport",
              ref: "job_poc_user_#_tasklet_poc_user_#_user_id",
            },
            {
              klass: "SqlDataDefine",
              key: "order_total_price",
              type: "number",
              mockRule: "decimalBetween",
              min: 1000000,
              max: 10000000,
              scale: 2,
            },
            {
              klass: "SqlDataDefine",
              key: "order_status",
              type: "number",
              mockRule: "integerBetween",
              min: 1,
              max: 5,
            },
            {
              klass: "SqlDataDefine",
              key: "order_created_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_send_ip",
              type: "string",
              mockRule: "ipV4",
            },
            {
              klass: "SqlDataDefine",
              key: "order_receive_ip",
              type: "string",
              mockRule: "ipV4",
            },
            {
              klass: "SqlDataDefine",
              key: "order_send_port",
              type: "number",
              mockRule: "port",
            },
            {
              klass: "SqlDataDefine",
              key: "order_receive_port",
              type: "number",
              mockRule: "port",
            },
            {
              klass: "SqlDataDefine",
              key: "order_send_time",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_receive_time",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_updated_at",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_payment_method",
              type: "string",
              mockRule: "title",
              min: 3,
              max: 5,
            },
            {
              klass: "SqlDataDefine",
              key: "order_shipping_address",
              type: "string",
              mockRule: "fullAddress",
            },
            {
              klass: "SqlDataDefine",
              key: "order_shipping_cost",
              type: "number",
              mockRule: "decimalBetween",
              min: 10,
              max: 100,
              scale: 2,
            },
            {
              klass: "SqlDataDefine",
              key: "order_discount",
              type: "number",
              mockRule: "decimalBetween",
              min: 0,
              max: 1000,
              scale: 2,
            },
            {
              klass: "SqlDataDefine",
              key: "order_coupon_code",
              type: "string",
              mockRule: "randomString",
              min: "10",
              max: "20",
            },
            {
              klass: "SqlDataDefine",
              key: "order_notes",
              type: "string",
              mockRule: "sentence",
              min: 100,
              max: 200,
            },
            {
              klass: "SqlDataDefine",
              key: "order_tracking_number",
              type: "string",
              mockRule: "randomString",
              min: "10",
              max: "20",
            },
            {
              klass: "SqlDataDefine",
              key: "order_estimated_delivery_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_actual_delivery_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_cancel_reason",
              type: "string",
              mockRule: "sentence",
              min: 50,
              max: 80,
            },
            {
              klass: "SqlDataDefine",
              key: "order_payment_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_shipment_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_completion_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01 00:00:00",
              max: "2024-03-31 23:59:59",
            },
            {
              klass: "SqlDataDefine",
              key: "order_customer_service_contact",
              type: "string",
              mockRule: "phoneNumber",
            },
            {
              klass: "SqlDataDefine",
              key: "order_refund_amount",
              type: "number",
              mockRule: "decimalBetween",
              min: 10000,
              max: 100000,
              scale: 2,
            },
            {
              klass: "SqlDataDefine",
              key: "order_refund_reason",
              type: "string",
              mockRule: "sentence",
              min: 50,
              max: 80,
            },
            {
              klass: "SqlDataDefine",
              key: "order_refund_date",
              type: "date",
              mockRule: "dateBetween",
              min: "2024-01-01T00:00:00.000Z",
              max: "2024-03-31T23:59:59.000Z",
            },
            {
              klass: "SqlDataDefine",
              key: "order_review",
              type: "json",
              mockRule: "json",
              meta: [
                {
                  key: "content",
                  type: "string",
                  mockRule: "avatar",
                },
              ],
            },
            {
              klass: "SqlDataDefine",
              key: "order_product_count",
              type: "number",
              mockRule: "longBetween",
              min: "50000",
              max: "10000",
            },
            {
              klass: "SqlDataDefine",
              key: "order_ip_address",
              type: "string",
              mockRule: "ipV4",
            },
          ],
        },
        processors: [
          {
            klass: "PocCopyInsertProcessor",
            name: "execute",
            sqlCollection: [
              "INSERT into\n  poc_order (\n    order_id,\n    user_id,\n    product_id,\n    total_price,\n    status,\n    created_at,\n    send_ip,\n    receive_ip,\n    send_port,\n    receive_port,\n    send_time,\n    receive_time,\n    updated_at,\n    payment_method,\n    shipping_address,\n    shipping_cost,\n    discount,\n    coupon_code,\n    notes,\n    tracking_number,\n    estimated_delivery_date,\n    actual_delivery_date,\n    cancel_reason,\n    payment_date,\n    shipment_date,\n    completion_date,\n    customer_service_contact,\n    refund_amount,\n    refund_reason,\n    refund_date,\n    review,\n    product_count,\n    ip_address\n  )\nVALUES\n  (\n    :order_id,\n    :user_id,\n    :product_id,\n    :order_total_price,\n    :order_status,\n    :order_created_at,\n    :order_send_ip,\n    :order_receive_ip,\n    :order_send_port,\n    :order_receive_port,\n    :order_send_time,\n    :order_receive_time,\n    :order_updated_at,\n    :order_payment_method,\n    :order_shipping_address,\n    :order_shipping_cost,\n    :order_discount,\n    :order_coupon_code,\n    :order_notes,\n    :order_tracking_number,\n    :order_estimated_delivery_date,\n    :order_actual_delivery_date,\n    :order_cancel_reason,\n    :order_payment_date,\n    :order_shipment_date,\n    :order_completion_date,\n    :order_customer_service_contact,\n    :order_refund_amount,\n    :order_refund_reason,\n    :order_refund_date,\n    :order_review,\n    :order_product_count,\n    :order_ip_address\n  )",
            ],
          },
        ],
      },
    ],
  };
};
