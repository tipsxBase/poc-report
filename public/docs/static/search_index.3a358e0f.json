[{"id":0,"title":"Hello World","content":"#","routePath":"/docs/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"POC  测试流程","content":"#\n\n\n\n\n从零开始做 POC#\n\n\n先对目标服务器进行磁盘性能测试及网络带宽测试，此步骤也可在数据库安装完成后让运维同学进行测试#\n\n\n\n\n\n\n\n注：如果客户没有提供测试的服务或客户提供的测试服务器磁盘性能或网络性能测试效果不佳，可以引导客户使用我们的服务器进行测试，这样测试过程跟测试结果更加可控。\n\n\n参数调整#\n\n在我们的知识库：海纳参数调整中有对应的调整参数的脚本：\n\n * 请至钉钉文档查看附件《general_guc.sh》是通用的参数调整脚本\n * 请至钉钉文档查看附件《oltp_guc.sh》是  TP  场景的参数调整脚本\n * 请至钉钉文档查看附件《olap_guc.sh》是  AP  场景下的参数调整脚本\n\n如果测试的是  TP  场景，那么就将  general_guc.sh  跟  oltp_guc.sh  脚本执行一下，如果是  AP  场景就将\ngeneral_guc.sh  跟  olap_guc.sh  脚本执行一下。\n\n\n\n\n\n\n准备测试用例 yaml 文件#\n\n根据客户的测试需求，从 POC 测试资产选择合适的测试用例，并按照测试要求将并发数、行宽及数据量进行调整。可以使用我们的工具进行测试用例管理\n\n请至钉钉文档查看附件《POCMaster_0.2.2_aarch64.dmg》请至钉钉文档查看附件《POCMaster_0.2.2_x64_en-US.msi》\n请至钉钉文档查看附件《POC 测试资产.docx》\n\n注：\n\n 1. 如果资产库已有的用例已经有测试结果并且已经满足客户的测试需求的，大家可以跳过实际测试，直接拿测试结果。\n 2. 如果客户没有特别具体的测试需求，那么我们可以按照客户的业务场景，比如  TP  还是  AP，然后从 POC 测试资产中选择适量用例形成测试报告。\n\n\n创建需要测试数据表#\n\n 1. 连接数据库\n\n\n\n 2. 创建用户，poc 测试时推荐创建用户时指标  sysadmin  角色，后面可以省去不少表没有权限的情况\n\n\n\n 3. 创建库\n\n\n\n 4. 使用新建的用户连接数据库\n\n\n\n 5. 创建 schema，推荐 schema  的名称跟用户名一样，这样在使用 jdbc 连接数据库的时候就可以不用指定  schema \n    名称，可以很容易的实现不同的用户连接不同的 schema。\n\n\n\n 6. 执行 DDL\n\nDDL 区分是  AP  还是  TP？\n\nTP  场景则选择  请至钉钉文档查看附件《ddl-row-oltp.sql》\n\nAP  场景选择请至钉钉文档查看附件《ddl-column-olap.sql》\n\n将 DDL 语句先上传至服务器中，通过命令创建数据表，也可以使用客户端工具比如  Navicat  或  DBeaver  等工具进行创建\n\n\n\n\n执行测试#\n\n将测试用例及测试工具上传至测试服务器，启动测试工具进行测试\n\n注：我们的测试工具依赖于 Java17，测试工具包中包括 JDK17 及测试工具包\n\n\n\n\n\n\n生成形成报告#\n\n按照我们提供的测试报告模板，收集测试用例的执行结果生成测试报告\n\n\nPOC  工具#\n\n\n2.1  流行流程图#\n\n\n\n\n数据库常用命令#\n\n\n2.1  命令行相关#\n\n2.1.1  查询集群状态#\n\n\n\n\n\n2.1.2  重启集群#\n\n\n\n2.1.3  使用  gs_guc  修改数据库参数#\n\n\n\n> -N node\n\n> -I instance\n\n> -c  具体要设置的参数值\n\n> 设置指定 node 指定 instance 的参数\n\n\n\n有的参数修改完是不需要重启集群的，有的参数修改完是需要重启集群的，参考  openGauss 官网。\n\n\n2.2  数据库脚本#\n\n2.2.1  查询列存表的相关信息#\n\n列存表需要注意 cu 的信息，cu 太小的话会严重影响查询性能，查询 cu(文件单元的相关信息)，需要连接 DN 上执行\n\n\n\n2.2.2  其它数据库常用脚本#\n\n\n\n\n数据库参数设置及优化#\n\n\n3.1  列式存储开启 delta 表#\n\n列存表写入时建议开启 delta 表，如果不开启 delta 表直接写入列存表，会导致列存数据单元太小，这样不仅仅是磁盘性能占用很大，而且影响查询性能，开启\ndelta 后，会先将数据写入 delta 行存表，然后再自动存入列存表。\n\n\n\n\n3.2  全文倒排索引( GIN-> Generalized Inverted Index )#\n\n创建 vs 插入\n\n由于可能要为每个项目插入很多键，所以 GIN 索引的插入可能比较慢。对于向表中大量插入的操作，我们建议先删除 GIN 索引，在完成插入之后再重建索引。与 GIN\n索引创建、查询性能相关的 GUC 参数如下：\n\n * maintenance_work_mem\n\nGIN 索引的构建时间对 maintenance_work_mem 的设置非常敏感。\n\n * work_mem\n\n在向启用了 FASTUPDATE 的 GIN 索引执行插入操作的期间，只要待处理实体列表的大小超过了\nwork_mem，系统就会清理这个列表。为了避免可观察到的响应时间的大起大落，让待处理实体列表在后台被清理是比较合适的（比如通过\nautovacuum）。前端清理操作可以通过增加 work_mem 或者执行 autovacuum 来避免。然而，扩大 work_mem\n意味着如果发生了前端清理，那么他的执行时间将更长。\n\n * gin_fuzzy_search_limit\n\n开发 GIN 索引的主要目的是为了让 openGauss\n支持高度可伸缩的全文索引，并且常常会遇见全文索引返回海量结果的情形。而且，这经常发生在查询高频词的时候，因而这样的结果集没什么用处。因为从磁盘读取大量记录并对其\n进行排序会消耗大量资源，这在产品环境下是不能接受的。为了控制这种情况，GIN 索引有一个可配置的返回结果行数的软上限的配置参数\ngin_fuzzy_search_limit。缺省值 0\n表示没有限制。如果设置了非零值，那么返回结果就是从完整结果集中随机选择的一部分。“软上限”的意思是返回结果的实际数量可能与指定的限制有偏差，这取决于查询和系统随\n机数生成器的质量。\n\n\n3.3  复制表#\n\n不经常变化但需要经常关联小表（比如字典表）创建为复制表，复制表会在在各个 DN 上都存在，搜索时可以减少跨 DN 查找数据。\n\n\n3.4  数据库优化的参数#\n\n3.4.1 work_mem#\n\n设置内部排序操作和 Hash 表在开始写入临时磁盘文件之前使用的内存大小。ORDER BY、DISTINCT 和 merge joins\n都要用到排序操作。Hash 表在散列连接、散列为基础的聚集、散列为基础的 IN 子查询处理中都要用到。\n\n对于复杂的查询，可能会同时并发运行好几个排序或者散列操作，每个都可以使用此参数所声明的内存量，不足时会使用临时文件。同样，好几个正在运行的会话可能会同时进行排序\n操作。因此使用的总内存可能是 work_mem 的好几倍。\n\n设置命令：\n\n\n\n设置建议：\n\n依据查询特点和并发来确定，一旦 work_mem 限定的物理内存不够，算子运算数据将写入临时表空间，带来 5-10\n倍的性能下降，查询响应时间从秒级下降到分钟级。\n\n * 对于串行无并发的复杂查询场景，平均每个查询有 5-10 关联操作，建议 work_mem=50%内存/10。\n * 对于串行无并发的简单查询场景，平均每个查询有 2-5 个关联操作，建议 work_mem=50%内存/5。\n * 对于并发场景，建议 work_mem=串行下的 work_mem/物理并发数\n\n3.4.2 max_process_memory#\n\n设置一个数据库节点可用的最大物理内存。\n\n设置命令：\n\n\n\n设置建议：\n\n数据库节点上该数值需要根据系统物理内存及单节点部署主数据库节点个数决定。建议计算公式如下：(物理内存大小\n - vm.min_free_kbytes) \\* 0.7 / (1 +  主节点个数)。该系数的目的是尽可能保证系统的可靠性，不会因数据库内存膨胀导致节点\nOOM。这个公式中提到 vm.min_free_kbytes，其含义是预留操作系统内存供内核使用，通常用作操作系统内核中通信收发内存分配，至少为\n5%内存。即，max_process_memory =  物理内存  * 0.665 / (1 +  主节点个数)。\n\n2C3D  对应 CN 主节点个数为 2，DN 主节点个数为 3\n\n> 注意：  当该值设置不合理，即大于服务器物理内存，可能导致操作系统 OOM 问题。\n\n3.4.3 shared_buffers#\n\n设置 HexaDB 使用的共享内存大小。增加此参数的值会使 HexaDB 比系统默认设置需要更多的 System V 共享内存。\n\n设置命令\n\n\n\n设置建议：\n\n建议设置 shared_buffers 值为内存的\n40%以内。行存列存分开对待。行存设大，列存设小。列存：(单服务器内存/单服务器数据库节点个数)*0.4*0.25。\n\n如果设置较大的 shared_buffers 需要同时增加 checkpoint_segments 的值，因为写入大量新增、修改数据需要消耗更多的时间周期。\n\n3.4.4 max_connections#\n\n允许和数据库连接的最大并发连接数。此参数会影响 HexaDB 的并发能力。\n\n设置命令\n\n\n\n设置建议：\n\n当高并发时提示数据库连接不够时，通过调整 max_connections 增加数据库连接\n\n3.4.5 cstore_buffers#\n\n设置列存所使用的共享缓冲区的大小。\n\n设置命令\n\n\n\n设置建议：\n\n列存表使用 cstore_buffers 设置的共享缓冲区，几乎不用 shared_buffers。因此在列存表为主的场景中，应减少\nshared_buffers，增加 cstore_buffers。\n\n\nFAQ#\n\n\n4.1  当列存表开启 delta（3.1）通过 2.2.1 查询发现数据还在 delta 表，没有真正写入列存表时，要怎么办？#\n\n可以手动从 delta 表 merge 到列存表\n\n\n\n\n4.2  如果通过  cm_ctl  查询集群状态特别慢，需要怎么办？#\n\n可以尝试杀掉  cm_server  进程\n\n\n\n\n其它命令#\n\n\n查询磁盘、IO、网络等适时指标#\n\n\n\n\n查询磁盘使用情况#\n\n\n\n\n海纳日志目录#\n\n","routePath":"/docs/poc/","lang":"","toc":[{"text":"从零开始做 POC","id":"从零开始做-poc","depth":2,"charIndex":5},{"text":"先对目标服务器进行磁盘性能测试及网络带宽测试，此步骤也可在数据库安装完成后让运维同学进行测试","id":"先对目标服务器进行磁盘性能测试及网络带宽测试此步骤也可在数据库安装完成后让运维同学进行测试","depth":3,"charIndex":18},{"text":"参数调整","id":"参数调整","depth":3,"charIndex":153},{"text":"准备测试用例 yaml 文件","id":"准备测试用例-yaml-文件","depth":3,"charIndex":437},{"text":"创建需要测试数据表","id":"创建需要测试数据表","depth":3,"charIndex":774},{"text":"执行测试","id":"执行测试","depth":3,"charIndex":1188},{"text":"生成形成报告","id":"生成形成报告","depth":3,"charIndex":1274},{"text":"POC  工具","id":"poc-工具","depth":2,"charIndex":1317},{"text":"2.1  流行流程图","id":"21-流行流程图","depth":3,"charIndex":1328},{"text":"数据库常用命令","id":"数据库常用命令","depth":2,"charIndex":1344},{"text":"2.1  命令行相关","id":"21-命令行相关","depth":3,"charIndex":1355},{"text":"2.1.1  查询集群状态","id":"211-查询集群状态","depth":4,"charIndex":1368},{"text":"2.1.2  重启集群","id":"212-重启集群","depth":4,"charIndex":1388},{"text":"2.1.3  使用  gs_guc  修改数据库参数","id":"213-使用-gs_guc-修改数据库参数","depth":4,"charIndex":1404},{"text":"2.2  数据库脚本","id":"22-数据库脚本","depth":3,"charIndex":1562},{"text":"2.2.1  查询列存表的相关信息","id":"221-查询列存表的相关信息","depth":4,"charIndex":1575},{"text":"2.2.2  其它数据库常用脚本","id":"222-其它数据库常用脚本","depth":4,"charIndex":1659},{"text":"数据库参数设置及优化","id":"数据库参数设置及优化","depth":2,"charIndex":1681},{"text":"3.1  列式存储开启 delta 表","id":"31-列式存储开启-delta-表","depth":3,"charIndex":1695},{"text":"3.2  全文倒排索引( GIN-> Generalized Inverted Index )","id":"32-全文倒排索引gin-generalizedinvertedindex","depth":3,"charIndex":1838},{"text":"3.3  复制表","id":"33-复制表","depth":3,"charIndex":2620},{"text":"3.4  数据库优化的参数","id":"34-数据库优化的参数","depth":3,"charIndex":2696},{"text":"3.4.1 work_mem","id":"341work_mem","depth":4,"charIndex":2712},{"text":"3.4.2 max_process_memory","id":"342max_process_memory","depth":4,"charIndex":3220},{"text":"3.4.3 shared_buffers","id":"343shared_buffers","depth":4,"charIndex":3628},{"text":"3.4.4 max_connections","id":"344max_connections","depth":4,"charIndex":3898},{"text":"3.4.5 cstore_buffers","id":"345cstore_buffers","depth":4,"charIndex":4022},{"text":"FAQ","id":"faq","depth":2,"charIndex":4182},{"text":"4.1  当列存表开启 delta（3.1）通过 2.2.1 查询发现数据还在 delta 表，没有真正写入列存表时，要怎么办？","id":"41-当列存表开启-delta31通过-221-查询发现数据还在-delta-表没有真正写入列存表时要怎么办","depth":3,"charIndex":4189},{"text":"4.2  如果通过  cm_ctl  查询集群状态特别慢，需要怎么办？","id":"42-如果通过-cm_ctl-查询集群状态特别慢需要怎么办","depth":3,"charIndex":4285},{"text":"其它命令","id":"其它命令","depth":2,"charIndex":4349},{"text":"查询磁盘、IO、网络等适时指标","id":"查询磁盘io网络等适时指标","depth":3,"charIndex":4357},{"text":"查询磁盘使用情况","id":"查询磁盘使用情况","depth":3,"charIndex":4378},{"text":"海纳日志目录","id":"海纳日志目录","depth":3,"charIndex":4392}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"TPC-C 最佳实践","content":"#\n\n\nTPC-C 概述#\n\nTPC-C 是专门针对联机交易处理系统（OLTP\n系统）的规范，也被称为业务处理系统规范。该规范由事务处理性能委员会（Transaction Processing Performance Council，简称\nTPC）制定，TPC 是一个由数十家会员公司创建的非盈利组织，主要负责制定商务应用基准程序的标准规范、性能和价格度量，并管理测试结果的发布。\n测试目标是通过模拟一个具有高并发、复杂事务的在线事务处理系统，评估计算机系统处理并发事务的能力。\n\n官网 ：https://www.tpc.org/tpcc/default5.asp\n\n\n测试模型#\n\nTPC-C 测试用到的模型是一个大型的商品批发销售公司，该公司拥有若干个分布在不同区域的商品仓库。当业务扩展时，公司会添加新的仓库。每个仓库负责为 10\n个销售点供货，每个销售点为 3000 个客户提供服务。每个客户提交的订单中，平均每个订单有 10 项产品，所有订单中约\n1%的产品在其直接所属的仓库中没有存货，必须由其他区域的仓库来供货。同时，每个仓库都要维护公司销售的 100,000 种商品的库存记录。\n\n\n\n\n测试事务说明#\n\nTPC-C 测试系统需要处理的交易事务主要包括以下几种：\n\n 1. 新订单（New-Order）：客户输入一笔新的订货交易。\n 2. 支付操作（Payment）：更新客户账户余额以反映其支付状况。\n 3. 发货（Delivery）：发货（模拟批处理交易）。\n 4. 订单状态查询（Order-Status）：查询客户最近交易的状态。\n 5. 库存状态查询（Stock-Level）：查询仓库库存状况，以便能够及时补货。\n\n\n测试指标#\n\n\n1. 流量指标（Throughput，简称 tpmC）：#\n\n * 定义：按照 TPC 组织的定义，流量指标描述了系统在执行支付操作、订单状态查询、发货和库存状态查询这 4 种交易的同时，每分钟可以处理多少个新订单交易。\n * 评估标准：所有交易的响应时间必须满足 TPC-C 测试规范的要求，且各种交易数量所占的比例也应该满足 TPC-C\n   测试规范的要求。流量指标值越大，说明系统的联机事务处理能力越高。\n\n\n2. 性价比（Price/Performance，简称 Price/tpmC）：#\n\n * 定义：即测试系统的整体价格（单位为美元）与流量指标的比值。\n * 评估标准：在获得相同的 tpmC 值的情况下，价格越低越好。\n\n\n测试工具#\n\n我们使用  BenchmarkSQL  来作为  TPC-C  测试工具，BenchmarkSQL 是一款用于数据库性能测试的开源工具，它遵循\nTPC-C（Transaction Processing Performance Council-C）规范来模拟一个订单处理系统的工作负载，以便对关系型数据库进\n行压力测试和性能评估。\n\n\n测试流程#\n\n\n\n安装\n\n需要准备一个独立于数据库服务器的负载机进行 TPC-C 测试，以免对数据库实际性能表现有影响。负载机建议 4C8G 以上的配置。\n\n依赖工具包\n\n> OpenJDK >=17 BenchmarkSQL >=5.0 nmon >=16 ant\n\n工具包下载\n\nBenchmarkSQL \n工具包下载链接：https://codeup.aliyun.com/634e0c6267fa83af64bd0235/hexadb/db-test/benchm\narksql-5.0/repository/archive.zip?spm=a2cl9.codeup_devops2020_goldlog_projectFil\nes.0.0.42e87e6azSp1zH&ref=main\n\n> 无下载权限联系  @李兆伟\n\n请至钉钉文档查看附件《benchmarksql-5.0.tar》\n\n服务器性能监控工具 Nmon 下载：\n\nhttps://nmon.sourceforge.io/pmwiki.php?n=Site.Download\n\n请至钉钉文档查看附件《nmon16p_32_binaries_feb_2024.tar.gz》\n\nJDK  下载\n\nhttps://mirror.tuna.tsinghua.edu.cn/Adoptium/17/jdk/x64/linux/OpenJDK17U-jdk\\_x6\n4\\_linux\\_hotspot\\_17.0.12\\_7.tar.gz\n\n请至钉钉文档查看附件《OpenJDK17U-jdk_x64_linux_hotspot_17.0.12_7.tar.gz》\n\n上传及解压\n\n使用 Ftp  工具或者使用  scp  命令上传到负载机。  上传后服务器安装包示例：\n\n解压\n\n\n\n安装\n\n\n\n配置\n\n进行数据库连接配置，配置文件位置示例：\n\n使用  vi  或  vim命令   编辑配置文件 关键配置项如下：\n\n 1. db :  数据库类型\n    \n    1. 海纳：hexadb\n    2. PostgreSQL: postgres\n    3. Oracle: oracle\n\n 2. driver:  数据库连接驱动\n\n 3. conn:  数据库连接字符串，注意数据库地址端口\n\n 4. user:  数据库用户名\n\n 5. password:  数据库用户密码\n\n 6. warehouses:  数仓数量，要测试的数据量\n\n 7. loadWorkers:  数仓加载线程数量，过大会导致数据库负载超限，根据数据实际负载能力进行设置，建议值  30-50\n\n 8. terminals: TPC-C  测试并发数量  300-1000  根据数据库实际负载进行配置\n\n 9. runMins:  测试运行时长  10-20\n\n> 注意  conn  中   指定数据库名  ，也可以在连接串中指定 schema 建议创建测试数据库 tpcc\n\n数据库参数配置\n\n对数据库参数进行调优，以发挥数据库最大性能表现。\n\ngeneral\n\n服务器使用  vi  命令\n\n\n\n把以下脚本拷贝文件中\n\n\n\n执行\n\n\n\nOLTP\n\n编辑并执行  /data/performance/oltp_guc.sh\n\n\n\n注意：\n\n> 检查内存设置参数  max_process_memory ,shared_buffers:  登录数据库服务器使用gsql  元命令查看\n> show max_process_memory``show shared_buffers max_process_memory =  服务总内存/节点数量\n> shared_buffers  参数值调高可以提高查询性能，当前场景下建议值为   max_process_memory/2\n\n执行数据库参数调整后需要重启数据库，进入数据库 CN 节点服务器执行如下命令：\n\n\n\n数据初始化\n\n在环境配置好之后，我们就可以进行数据初始化工作了，这一步主要使用BenchmarkSQL  工具进行。\n\n 1. 登录负载服务器，编辑运行如下脚本：\n\n\n\n 2. 观察日志，比如我们初始化 10 仓数据，日志输出  Loading Warehouse 10 done   说明数据初始化成功。\n 3. 观察索引创建情况，出现下图时成功\n\n\n\n> 有一些外键创建失败，忽略该错误\n\n 4. 初始化后查看数据新\n\n查询表结构是否正确（主键、索引） 查询表数据量和数据存储大小\n\n 5. 异常情况处理\n\n数据初始化中的一些异常、错误请联系 DBA 进行处理。\n\n清除数据命令：\n\n\n\n性能监控\n\n监控指标\n\nTPC-C  测试运行期间的性能监控分   服务器监控和数据库监控两部分，监控的指标项为：\n\n序号   指标项       类别      采集周期   监控工具\n1    CPU 使用率   服务器监控   10s    nmon\n2    内存使用及占比   服务器监控   10s    nmon\n3    磁盘 IO     服务器监控   10s    nmon\n4    网络 IO     服务器监控   10s    nmon\n5    节点内存使用    数据库监控   30s    司南 or  脚本\n6    QPS       数据库监控   30s    司南 or  脚本\n7    响应时间      数据库监控   30s    司南 or  脚本\n8    会话数       数据库监控   30s    司南 or  脚本\n9    连接数       数据库监控   30s    司南 or  脚本\n10   TPS       数据库监控   30s    司南 or  脚本\n11   事务响应时间    数据库监控   30s    司南 or  脚本\n12   事务锁等待次数   数据库监控   30s    司南 or  脚本\n13   事务数量      数据库监控   30s    司南 or  脚本\n14   P80       数据库监控   30s    司南 or  脚本\n15   p95       数据库监控   30s    司南 or  脚本\n\n监控工具\n\n\n有司南#\n\n使用司南进行数据库集群监控\n\n\n无司南#\n\n使用 nmon  进行数据库服务器监控，要对所有数据库服务器进行 nmon  安装。 执行命令nmon -fT -s 10 -c 720  开启监控。该命令每\n10 秒采集一次数据，采集 2 小时\n\n数据库性能监控脚本暂无  ，待补充。\n\n执行测试\n\n正式开始测试前检查   测试配置，重点关注下\n\n 1. terminals :  并发量\n 2. runMins:  运行时间\n 3. 监控工具是否开启\n\n使用如下命令开始 TPC-C 测试\n\n\n\n> 需要执行 3 次以上的 TPC-C  测试，获取数据库最稳定的性能表现\n\n测试报告\n\n测试报告参考  ：","routePath":"/docs/tpcc/","lang":"","toc":[{"text":"TPC-C 概述","id":"tpc-c-概述","depth":2,"charIndex":3},{"text":"测试模型","id":"测试模型","depth":2,"charIndex":284},{"text":"测试事务说明","id":"测试事务说明","depth":2,"charIndex":501},{"text":"测试指标","id":"测试指标","depth":2,"charIndex":722},{"text":"1. 流量指标（Throughput，简称 tpmC）：","id":"1-流量指标throughput简称-tpmc","depth":3,"charIndex":730},{"text":"2. 性价比（Price/Performance，简称 Price/tpmC）：","id":"2-性价比priceperformance简称-pricetpmc","depth":3,"charIndex":939},{"text":"测试工具","id":"测试工具","depth":2,"charIndex":1051},{"text":"测试流程","id":"测试流程","depth":2,"charIndex":1225},{"text":"有司南","id":"有司南","depth":3,"charIndex":3864},{"text":"无司南","id":"无司南","depth":3,"charIndex":3886}],"domain":"","frontmatter":{},"version":""}]